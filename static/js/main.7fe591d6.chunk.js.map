{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","previousGood","currentGood","ALPHABET","localeCompare","LENGTH","length","NONE","Error","reverse","App","state","this","className","type","classNames","onClick","setState","previousState","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,wGAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAe,YAAIH,GACtBI,MAAK,SAACC,EAAcC,GACnB,OAAQL,GACN,KAAKJ,EAASU,SACZ,OAAOF,EAAaG,cAAcF,GAEpC,KAAKT,EAASY,OACZ,OAAOJ,EAAaK,OAASJ,EAAYI,OAE3C,KAAKb,EAASc,KACZ,OAAO,EAET,QACE,MAAM,IAAIC,MAAJ,uCAA0CX,QAIxD,OAAOC,EACHC,EAAaU,UACbV,G,SAlCDN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA0CE,IAAMiB,EAAb,4MACEC,MAAyB,CACvBb,YAAY,EACZD,SAAUJ,EAASc,MAHvB,4CAME,WAAU,IAAD,OACP,EAAiCK,KAAKD,MAA9Bb,EAAR,EAAQA,WAAYD,EAApB,EAAoBA,SAEpB,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYlB,IAAaJ,EAASU,WAGtCa,QAAS,kBAAM,EAAKC,SAClB,CAAEpB,SAAUJ,EAASU,YATzB,iCAeA,wBACEW,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYlB,IAAaJ,EAASY,SAGtCW,QAAS,kBAAM,EAAKC,SAClB,CAAEpB,SAAUJ,EAASY,UATzB,4BAeA,wBACES,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAajB,IAGjBkB,QAAS,kBAAM,EAAKC,UAAS,SAAAC,GAAa,MAAK,CAC7CpB,YAAaoB,EAAcpB,gBAT/B,sBAgBGD,IAAaJ,EAASc,MAAQT,IAE3B,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAM,EAAKC,SAClB,CACEnB,YAAY,EACZD,SAAUJ,EAASc,QANzB,sBAgBR,6BAEIZ,EAAkBD,EAAiBkB,KAAKD,OACrCQ,KAAI,SAAAC,GAAI,OACP,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,eAhFxC,GAAyBC,IAAMC,WCzD/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7fe591d6.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods]\n    .sort((previousGood, currentGood) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return previousGood.localeCompare(currentGood);\n\n        case SortType.LENGTH:\n          return previousGood.length - currentGood.length;\n\n        case SortType.NONE:\n          return 0;\n\n        default:\n          throw new Error(`Unknown value of sort type - ${sortType}`);\n      }\n    });\n\n  return isReversed\n    ? visibleGoods.reverse()\n    : visibleGoods;\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  render() {\n    const { isReversed, sortType } = this.state;\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-info',\n              {\n                'is-light': sortType !== SortType.ALPHABET,\n              },\n            )}\n            onClick={() => this.setState(\n              { sortType: SortType.ALPHABET },\n            )}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-success',\n              {\n                'is-light': sortType !== SortType.LENGTH,\n              },\n            )}\n            onClick={() => this.setState(\n              { sortType: SortType.LENGTH },\n            )}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-warning',\n              {\n                'is-light': !isReversed,\n              },\n            )}\n            onClick={() => this.setState(previousState => ({\n              isReversed: !previousState.isReversed,\n            }))}\n          >\n            Reverse\n          </button>\n\n          {\n            (sortType !== SortType.NONE || isReversed)\n              && (\n                <button\n                  type=\"button\"\n                  className=\"button is-danger is-light\"\n                  onClick={() => this.setState(\n                    {\n                      isReversed: false,\n                      sortType: SortType.NONE,\n                    },\n                  )}\n                >\n                  Reset\n                </button>\n              )\n          }\n        </div>\n\n        <ul>\n          {\n            getReorderedGoods(goodsFromServer, this.state)\n              .map(good => (\n                <li data-cy=\"Good\" key={good}>{good}</li>\n              ))\n          }\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}